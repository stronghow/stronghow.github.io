<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[linux搭建hexo]]></title>
    <url>%2F2017%2F11%2F01%2Flinux%E6%90%AD%E5%BB%BAhexo%2F</url>
    <content type="text"><![CDATA[安装nodejs 去官方网站下载已经编译好的包 解压压缩包，设置全局路径1sudo ln -s /media/stronghow/Stronghow/下载/ode-v8.9.0-linux-x64/bin/node /usr/local/bin/node 其中 /media/stronghow/Stronghow/下载/ode-v8.9.0-linux-x64/bin/node 是解压包的路径要在 /media/stronghow/Stronghow/下载/ode-v8.9.0-linux-x64/bin 下执行，减少不必要的麻烦 同理，设置npm 1sudo ln -s /media/stronghow/Stronghow/下载/ode-v8.9.0-linux-x64/bin/npm /usr/local/bin/npm 配置npm的镜像为国内淘宝镜像，不然有的包下载不了（比如 hexo, 好坑） 1sudo npm install -g cnpm --registry=https://registry.npm.taobao.org 设置cnpm为全局路径 1sudo ln -s /media/stronghow/Stronghow/下载/ode-v8.9.0-linux-x64/bin/cnpm /usr/local/bin/cnpm 安装hexo 1sudo cnpm insatll hexo-cli -g 设置hexo为全局路径 1sudo ln -s /media/stronghow/Stronghow/下载/ode-v8.9.0-linux-x64/bin/hexo /usr/local/bin/hexo]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>nodejs</tag>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[在windows下安装flex和bison]]></title>
    <url>%2F2017%2F10%2F21%2F%E5%9C%A8windows%E4%B8%8B%E5%AE%89%E8%A3%85flex%E5%92%8Cbison%2F</url>
    <content type="text"><![CDATA[词法分析器LEX是UNIX的工具，因此我们需要使用FLEX代替,使得在windows下使用；配对：LEX和YACCFLEX和BISONJFLEX和JavaCUP 下载得网址:flexbison 最偷懒得方法就是直接下载 Complete package, except sources打开右键我得电脑→属性→內容→高级→环境变量→系统变量→path→编辑加入;C:\Program Files(x86)\GnuWin32\bin;cmd键入flex -Vbison -V这样就能看到正确得信息就表示安装成功了！！ 使用flex步骤一：123456789101112131415161718192021%&#123; //声明一些变量或函数 %&#125; //定义正则表达式 //比如: //num ([0-9])+ //左边为符号，右边为正则表达式 %% //定义一系列的动作，即如果匹配了上面定义的某个正则表达式之后的动作,此动作是C语言的语句 //比如： //&#123;num&#125; &#123;printf(&quot;num&quot;);&#125; //左边为&#123;模式&#125;,右边为&#123;C语句&#125;; %% void main() //执行主函数 &#123; yylex(); //开始解析语句,内置函数 //定义C语言语句 &#125; int yywrap() &#123; return 1; &#125; 示列（name.l）123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199%&#123;#include &quot;stdio.h&quot;#include &quot;stdlib.h&quot;%&#125;/*标识符*/id [a-zA-Z_][a-zA-Z_0-9]*/*常量*/num ([1-9][0-9]*|[0])|([0][Xx]([1-9][0-9]*|[0]))|([0][0-7])|([0-9]*[.][0-9]+([eE][+-]?[0-9]*|[0])?f?) ch \&apos;([^&apos;])&#123;1&#125;\&apos;str \&quot;(\\.|[^&quot;\\])*\&quot;/*关键字*/kw_int intkw_float floatkw_double doublekw_char charkw_void voidkw_if ifkw_then thenkw_else elsekw_switch switchkw_case casekw_default defaultkw_while whilekw_do dokw_for forkw_break breakkw_continue continuekw_return return/*运算符*/add [+]sub [-]mul [*]div [/]mod [%]inc [+][+]dec [-][-]not [!]and [&amp;][&amp;]or [|][|]assign [=]gt [&gt;]ge [&gt;][=]lt [&lt;]le [&lt;][=]equ [=][=]nequ [!][=]/*分解符*/comma [,]colon [:]simcon [;]lparen \(rparen \)lbracket \[rbracket \]lbrac \&#123;rbrac \&#125;%%&#123;kw_int&#125; |&#123;kw_float&#125; |&#123;kw_double&#125; |&#123;kw_char&#125; |&#123;kw_void&#125; |&#123;kw_if&#125; |&#123;kw_then&#125; |&#123;kw_else&#125; |&#123;kw_switch&#125; |&#123;kw_case&#125; |&#123;kw_default&#125; |&#123;kw_while&#125; |&#123;kw_do&#125; |&#123;kw_for&#125; |&#123;kw_break&#125; |&#123;kw_continue&#125; |&#123;kw_return&#125; &#123; printf(&quot;&lt;kw_%s, %s&gt;\n&quot;, yytext, yytext);&#125;&#123;ch&#125; &#123; printf(&quot;&lt;ch, %s&gt;\n&quot;, yytext);&#125;&#123;str&#125; &#123; printf(&quot;&lt;str, %s&gt;\n&quot;, yytext);&#125;&#123;id&#125; &#123; printf(&quot;&lt;id, %s&gt;\n&quot;, yytext);&#125;&#123;num&#125; &#123; printf(&quot;&lt;num, %s&gt;\n&quot;, yytext);&#125;&#123;add&#125; &#123; printf(&quot;&lt;add, %s&gt;\n&quot;, yytext);&#125;&#123;sub&#125; &#123; printf(&quot;&lt;sub, %s&gt;\n&quot;, yytext);&#125;&#123;mul&#125; &#123; printf(&quot;&lt;mul, %s&gt;\n&quot;, yytext);&#125;&#123;div&#125; &#123; printf(&quot;&lt;div, %s&gt;\n&quot;, yytext);&#125;&#123;mod&#125; &#123; printf(&quot;&lt;mod, %s&gt;\n&quot;, yytext);&#125;&#123;inc&#125; &#123; printf(&quot;&lt;inc, %s&gt;\n&quot;, yytext);&#125;&#123;dec&#125; &#123; printf(&quot;&lt;dec, %s&gt;\n&quot;, yytext);&#125;&#123;not&#125; &#123; printf(&quot;&lt;not, %s&gt;\n&quot;, yytext);&#125;&#123;and&#125; &#123; printf(&quot;&lt;and, %s&gt;\n&quot;, yytext);&#125;&#123;or&#125; &#123; printf(&quot;&lt;or, %s&gt;\n&quot;, yytext);&#125;&#123;assign&#125; &#123; printf(&quot;&lt;assign, %s&gt;\n&quot;, yytext);&#125;&#123;gt&#125; &#123; printf(&quot;&lt;gt, %s&gt;\n&quot;, yytext);&#125;&#123;ge&#125; &#123; printf(&quot;&lt;ge, %s&gt;\n&quot;, yytext);&#125;&#123;lt&#125; &#123; printf(&quot;&lt;lt, %s&gt;\n&quot;, yytext);&#125;&#123;le&#125; &#123; printf(&quot;&lt;le, %s&gt;\n&quot;, yytext);&#125;&#123;equ&#125; &#123; printf(&quot;&lt;equ, %s&gt;\n&quot;, yytext);&#125;&#123;nequ&#125; &#123; printf(&quot;&lt;nequ, %s&gt;\n&quot;, yytext);&#125;&#123;comma&#125; &#123; printf(&quot;&lt;comma, %s&gt;\n&quot;, yytext);&#125;&#123;colon&#125; &#123; printf(&quot;&lt;colon, %s&gt;\n&quot;, yytext);&#125;&#123;simcon&#125; &#123; printf(&quot;&lt;simcon, %s&gt;\n&quot;, yytext);&#125;&#123;lparen&#125; &#123; printf(&quot;&lt;lparen, %s&gt;\n&quot;, yytext);&#125;&#123;rparen&#125; &#123; printf(&quot;&lt;rparen, %s&gt;\n&quot;, yytext);&#125;&#123;lbracket&#125; &#123; printf(&quot;&lt;lbracket, %s&gt;\n&quot;, yytext);&#125;&#123;rbracket&#125; &#123; printf(&quot;&lt;rbracket, %s&gt;\n&quot;, yytext);&#125;&#123;lbrac&#125; &#123; printf(&quot;&lt;lbrac, %s&gt;\n&quot;, yytext);&#125;&#123;rbrac&#125; &#123; printf(&quot;&lt;rbrac, %s&gt;\n&quot;, yytext);&#125;%%int yywrap() &#123; return 1;&#125;int main(int argc, char** argv) &#123; if (argc &gt; 1) &#123; if (!(yyin = fopen(argv[1], &quot;r&quot;))) &#123; perror(argv[1]); return 1; &#125; &#125; while (yylex()); return 0;&#125; 文本(Text.txt)12345678910int float &#123;&#125;()[] 0 0x0 0x123 123.5 .3e-10f = &gt;= || &amp;&amp; ! ; , this_is_an_id id123 if then else &apos;f&apos;&quot;bfgg&quot; 步骤二：123flex name.lgcc -o out.exe lex.yy.cout.exe Text.txt 结果123456789101112131415161718192021222324252627282930313233343536&lt;kw_int, int&gt; &lt;kw_float, float&gt; &lt;lbrac, &#123;&gt;&lt;rbrac, &#125;&gt;&lt;lparen, (&gt;&lt;rparen, )&gt;&lt;lbracket, [&gt;&lt;rbracket, ]&gt; &lt;num, 0&gt;&lt;num, 0x0&gt; &lt;num, 0x123&gt;&lt;num, 123.5&gt;&lt;num, .3e-10f&gt;&lt;assign, =&gt; &lt;ge, &gt;=&gt; &lt;or, ||&gt; &lt;and, &amp;&amp;&gt; &lt;not, !&gt; &lt;simcon, ;&gt; &lt;comma, ,&gt;&lt;id, this_is_an_id&gt;&lt;id, id123&gt;&lt;kw_if, if&gt; &lt;kw_then, then&gt; &lt;kw_else, else&gt;&lt;ch, &apos;f&apos;&gt;&lt;str, &quot;bfgg&quot;&gt; 注意rule组合使用同一函数时必须放最前面，否则报错即此段代码12345678910111213141516171819&#123;kw_int&#125; |&#123;kw_float&#125; |&#123;kw_double&#125; |&#123;kw_char&#125; |&#123;kw_void&#125; |&#123;kw_if&#125; |&#123;kw_then&#125; |&#123;kw_else&#125; |&#123;kw_switch&#125; |&#123;kw_case&#125; |&#123;kw_default&#125; |&#123;kw_while&#125; |&#123;kw_do&#125; |&#123;kw_for&#125; |&#123;kw_break&#125; |&#123;kw_continue&#125; |&#123;kw_return&#125; &#123; printf(&quot;&lt;kw_%s, %s&gt;\n&quot;, yytext, yytext);&#125; 要放在最前面]]></content>
      <categories>
        <category>编译原理</category>
      </categories>
      <tags>
        <tag>词法分析器</tag>
        <tag>flex</tag>
        <tag>bison</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Android开发之AndroidAnnotations框架的使用]]></title>
    <url>%2F2017%2F08%2F07%2FAndroid%E5%BC%80%E5%8F%91%E4%B9%8BAndroidAnnotations%E6%A1%86%E6%9E%B6%E7%9A%84%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[Android开发之AndroidAnnotations框架的使用遇到的问题 Warning:Android-apt plugin is incompatible with future version of android Gradle plugin. Please use ‘annotationProcessor’ configuration instead.解决]]></content>
      <categories>
        <category>Android开发</category>
      </categories>
      <tags>
        <tag>框架</tag>
        <tag>AndroidAnnotations</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[AndroidSDK_Support自带夜间、日间模式切换详解]]></title>
    <url>%2F2017%2F08%2F05%2FAndroidSDK-Support%E8%87%AA%E5%B8%A6%E5%A4%9C%E9%97%B4%E3%80%81%E6%97%A5%E9%97%B4%E6%A8%A1%E5%BC%8F%E5%88%87%E6%8D%A2%E8%AF%A6%E8%A7%A3%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[Android_Studio主题配置]]></title>
    <url>%2F2017%2F08%2F02%2FAndroid-Studio%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[Android_Studio从Git上Clone项目]]></title>
    <url>%2F2017%2F08%2F02%2FAndroid-Studio%E4%BB%8EGit%E4%B8%8AClone%E9%A1%B9%E7%9B%AE%2F</url>
    <content type="text"><![CDATA[在Android Studio中设置Git打开 File &rarr; setting, 得到如下图： 打开File &rarr; New &rarr; Project from Version Control &rarr; Git,弹出界面如下图：]]></content>
      <categories>
        <category>Android_studio</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mysql数据库的导入导出]]></title>
    <url>%2F2017%2F07%2F30%2Fmysql%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA%2F</url>
    <content type="text"><![CDATA[导出数据库最常用导出数据库1mysqldump -u用户名 -p 数据库名&gt;保存路径\xx.sql 注意：此备份只备份数据和数据结构，没有备份存储过程和触发器 导出所有数据库1mysqldump -u用户名 -p -a&gt;保存路径\xx.sql 只导出数据不导出数据结构1mysqldump -u用户名 -p -t数据库名&gt;保存路径\xx.sql 导出数据库中的触发器（Events）1mysqldump -u用户名 -p -e数据库名&gt;保存路径\xx.sql 导出数据库中的存储过程和函数1mysqldump -u用户名 -p -r数据库名&gt;保存路径\xx.sql 导入数据库1mysql -u用户名 -p 数据库名&lt;备份路径\xx.sql]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>cmd</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo+github搭建博客流程]]></title>
    <url>%2F2017%2F07%2F26%2Fhexo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%B5%81%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[环境配置小茗同学的博客园 NexT主题配置为NexT主题添加文章阅读量统计功能 hexo之next主题优化整理 hexo next主题配置 Hexo-next主题个性化配置(细节多)]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>gihub</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo部署到github遇到的坑]]></title>
    <url>%2F2017%2F07%2F26%2Fhexo%E9%83%A8%E7%BD%B2%E5%88%B0github%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91%2F</url>
    <content type="text"><![CDATA[1. 部署到github无法存储图片解决： 注册七牛云 &rarr; 新建存储空间（对象存储） &rarr; 上传图片工具进行图片上传到七牛云 &rarr; 获取外链 2. markdown无法满足需求解决：直接写html]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>github pages</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[windows下用cmd命令netstat查看系统端口使用情况]]></title>
    <url>%2F2017%2F07%2F26%2Fwindows%E4%B8%8B%E7%94%A8cmd%E5%91%BD%E4%BB%A4netstat%E6%9F%A5%E7%9C%8B%E7%B3%BB%E7%BB%9F%E7%AB%AF%E5%8F%A3%E4%BD%BF%E7%94%A8%E6%83%85%E5%86%B5%2F</url>
    <content type="text"><![CDATA[大家可以在cmd窗口执行 查看一个端口被哪个进程占用，然后杀掉他 查看任务管理器 用pid查找程序]]></content>
      <categories>
        <category>windows</category>
      </categories>
      <tags>
        <tag>cmd</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2F07%2F24%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>